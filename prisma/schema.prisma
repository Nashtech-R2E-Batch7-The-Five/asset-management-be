generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int             @id @default(autoincrement())
  firstName    String
  staffCode    String?         @unique
  lastName     String
  username     String?         @unique
  password     String?
  gender       GENDER          @default(OTHER)
  salt         String?
  refreshToken String?
  isAssigned   Boolean         @default(false)
  isDisabled   Boolean         @default(false)
  joinedDate   DateTime
  type         USER_TYPE       @default(USER)
  dateOfBirth  DateTime
  state        Boolean
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  location     LOCATION        @default(HCM)
  Assignment   Assignment[]    @relation("AssignedBy")
  assignments  Assignment[]    @relation("AssignedTo")
  accepted     RequestReturn[] @relation("AcceptedBy")
  requests     RequestReturn[] @relation("RequestedBy")
}

model RequestReturn {
  id            Int                  @id @default(autoincrement())
  requestedById Int
  assignedDate  DateTime
  acceptedById  Int?
  returnedDate  DateTime?
  state         REQUEST_RETURN_STATE @default(WAITING_FOR_RETURNING)
  assignmentId  Int
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  assetId       Int
  isRemoved     Boolean              @default(false)
  acceptedBy    User?                @relation("AcceptedBy", fields: [acceptedById], references: [id])
  asset         Asset                @relation(fields: [assetId], references: [id])
  assignment    Assignment           @relation(fields: [assignmentId], references: [id])
  requestedBy   User                 @relation("RequestedBy", fields: [requestedById], references: [id])
}

model Assignment {
  id                 Int              @id @default(autoincrement())
  assetCode          String
  assetName          String
  assignedToId       Int
  assignedToUsername String
  assignedByUsername String
  assignedById       Int
  assignedDate       DateTime
  state              ASSIGNMENT_STATE @default(WAITING_FOR_ACCEPTANCE)
  note               String?
  location           LOCATION
  isRemoved          Boolean          @default(false)
  assetId            Int?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  Asset              Asset?           @relation(fields: [assetId], references: [id])
  assignedBy         User             @relation("AssignedBy", fields: [assignedById], references: [id])
  assignedTo         User             @relation("AssignedTo", fields: [assignedToId], references: [id])
  requestReturns     RequestReturn[]
}

model Asset {
  id              Int             @id @default(autoincrement())
  assetCode       String          @unique
  assetName       String
  categoryId      Int
  installedDate   DateTime
  state           ASSET_STATE     @default(AVAILABLE)
  location        LOCATION        @default(HCM)
  specification   String?
  isRemoved       Boolean         @default(false)
  isAllowRemoved  Boolean         @default(true)
  isReadyAssigned Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  category        Category        @relation(fields: [categoryId], references: [id])
  assignments     Assignment[]
  RequestReturn   RequestReturn[]
}

model Category {
  id           Int      @id @default(autoincrement())
  categoryCode String   @unique
  categoryName String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  assets       Asset[]
}

enum USER_TYPE {
  ADMIN
  USER
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

enum LOCATION {
  HCM
  HN
  DN
}

enum REQUEST_RETURN_STATE {
  CANCELED
  COMPLETED
  WAITING_FOR_RETURNING
}

enum ASSIGNMENT_STATE {
  WAITING_FOR_ACCEPTANCE
  ACCEPTED
  DECLINED
}

enum ASSET_STATE {
  AVAILABLE
  NOT_AVAILABLE
  WAITING_FOR_RECYCLING
  RECYCLED
  ASSIGNED
}
